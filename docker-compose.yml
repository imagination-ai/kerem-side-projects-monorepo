version: "3.8"
services:

  style:
    build:
      context: .
      target: style
      dockerfile: Dockerfile
    image: imagination-ai/style
    volumes:
      - ./style:/applications/style
      - ./common:/applications/common
    ports:
      - "8080:8080"
    networks:
      - backend
    entrypoint: ["python", "/applications/style/main.py"]
    restart: "no"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  inflation:
    build:
      context: .
      target: inflation
      dockerfile: Dockerfile
    image: imagination-ai/inflation
    volumes:
      - ./inflation:/applications/inflation
      - ./common:/applications/common
    ports:
      - "8000:8000"
    networks:
      - backend
    restart: "no"
    environment:
      - STORAGE_EMULATOR_HOST=http://mock-cloud-storage:4443
      - CRAWLER_BUCKET=test-bucket
      - PARSER_BUCKET=test-bucket
      - MISC_BUCKET=test-bucket
      - ENVIRONMENT=docker
    depends_on:
      - mock-cloud-storage
#    entrypoint: ["sleep", "3600"]
    entrypoint: ["python", "/applications/inflation/main.py"]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  portfolio:
    build:
      context: .
      target: portfolio
      dockerfile: Dockerfile-portfolio
    image: imagination-ai/portfolio
    environment:
      - REACT_APP_STYLE_HOST=style
      - REACT_APP_STYLE_PORT=8080
    ports:
      - "3000:443"
    networks:
      - backend
    restart: "no"
    depends_on:
      - style
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  mock-cloud-storage:
    image: fsouza/fake-gcs-server
    networks:
      - backend
    ports:
      - "4443:4443"
    volumes:
      - ./fake-gcs:/data  # bucket
    command: "-scheme=http"
  # (TODO: osman) Uncomment when we need it.
  #localstack:
    #image: localstack/localstack:0.11.1
    #networks:
      #- backend
    #ports:
      #- "4566:4566"
      #- "${PORT_WEB_UI:-8080}:${PORT_WEB_UI:-8080}"
    #environment:
      #- SERVICES=sqs,s3
      #- DOCKER_HOST=unix:///var/run/docker.sock
      #- DATA_DIR=/tmp/localstack/data
      #- HOSTNAME_EXTERNAL=localstack
      #- AWS_REGION=us-east-1
      #- AWS_DEFAULT_REGION=us-east-1
      #- AWS_SECRET_ACCESS_KEY=AFakeKey
      #- AWS_ACESSS_KEY_ID=AFakeId
      #- DEBUG=${DEBUG- }

  style-trainer:
    build:
      context: .
      target: style_trainer
      dockerfile: Dockerfile
    image: imagination-ai/style-trainer
    volumes:
      - ./style:/applications/style
      - ./common:/applications/common
      - ./style-resources/datasets/book_ds:/applications/style-resources/datasets/book_ds
      - ./style-resources/models:/applications/style-resources/models
    ports:
      - "8000:8000"
    networks:
      - backend
    entrypoint: ["python", '-m',  'style.train.classifier_trainer',  '--document_length',  '500',  '--cross_validation',  '2',  '--test_percentage',  '0.2',  '--min_df',  '3',  '--num_books',  '10']
    environment:
      - STORAGE_EMULATOR_HOST=http://mock-cloud-storage:4443
      - CRAWLER_BUCKET=test-bucket
      - PARSER_BUCKET=test-bucket
      - MISC_BUCKET=test-bucket
      - ENVIRONMENT=dev
    depends_on:
      - mock-cloud-storage
    restart: "no"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  backend:

volumes:
  db-data: {}
